// в JavaScript переменные могут хранить либо непосредственно значения (для примитивных типов данных), либо ссылки на объекты (для объектов).
// Примитивные типы данных в JavaScript передаются по значению. Это включает в себя типы данных, такие как числа (Number), строки (String), булевы значения (Boolean), null, undefined, и символы (Symbol).
// Объекты в JavaScript (включая массивы, функции и другие объекты) передаются по ссылке. Это означает, что когда вы присваиваете объект одной переменной и затем эту переменную другой переменной, обе переменные ссылаются на один и тот же объект в памяти. Любые изменения, сделанные через одну переменную, будут видны и при доступе к объекту через другую переменную.

// Создаём объект и передаём ссылку на него в константу
const obj_a = {
    a: 'знач_1',
    b: { f: 1 },
    c: 2
};
// Присваиваем ссылку в другую константу
const obj_b = obj_a;
// Выводим объект по одной ссылке и по другой (это один и тот же объект, поэтому они равны)
show();

// Меняем значение свойства объекта через ссылку в первом объекте
obj_a.a = 4;
// Проверяем объект по обеим ссылкам. Ссылки указывают на один и тот же объект, поэтому мы получаем одинаковыq результат
show();

// Меняем значение свойства объекта через ссылку во втором объекте
obj_b.a = 8;
// Результат всё еще тот же)
show();

function show(a, b) {
    console.log(a);
    console.log(b);
}
compare(obj_a, obj_b); // Если сравнивать эти 2 константы, то получим true, потому что они содержат один и тот же объект

const obj_c = { a: 1 };
const obj_d = { a: 1 };
compare(obj_c, obj_d); // При этом сравнение констант содержащих ссылки на одинаковые объекты даёт false, потому что это разные ссылки на 2 одинаковых объекта.
compare(obj_c.a, obj_d.a); // При этом сравнение значений в ключах конечно же даст true;

function compare(a, b) {
    console.log(a === b);
}

// Настоящее копирование объектов можно устроить с помощью
// – structuredClone(original) — самый новый, но медленный юзаем его
// – JSON.parse(JSON.stringify(original)) — самый старый и работает с меньшим количеством сущностей
// – Object.assign({}, original) — самый простой, но только для простых структур
// Копирование не копирует методы и скорее всего такой финт выдаст ошибку. Но Артём говорит, что методы в объектах хранят только наркоманы, так что поф.
const trueObjCopy = structuredClone(obj_a);
obj_a.a = 6;
show(obj_a, trueObjCopy); // Объекты независимы

// А теперь попробуем по-копировать разные объекты
const orig_aObj = {
    a: 1,
    b: 'sad',
    c: true
};
const orig_bObj = {
    a: { a: { a: 1 } },
    b: { b: 'asda' },
    c: true
};
const orig_cObj = {
    a() {
        console.log('Privet');
    },
    c: true
};

const copy_a = structuredClone(orig_aObj);
const copy_b = structuredClone(orig_bObj);
copy_b.b = 1;
show(orig_bObj, copy_b); // Скопировано
// const copy_c = structuredClone(orig_cObj); // Будет ошибка Uncaught DOMException DOMException
